import Signer from './lib/Signer.ts'
import deploy from './lib/deploy.ts'
import * as e from './ejra/mod.ts'
import verify from './lib/verify.ts'
import mkn0 from './lib/mkn0.ts'

const secret = Deno.args[0]
const signer = new Signer({ secret })
const url = 'https://endpoints.omniatech.io/v1/avax/fuji/public'
// const { url } = await mkn0({ log: true, signer })
let ejrrqs = [], ejrrq

ejrrqs = [e.chainId(), e.gasPrice()]
const [chainId, gasPrice] = await e.ejrb({ url, ejrrqs })

const setServersBytecode = '0x608060405234801561001057600080fd5b5061040d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea81ee9514610030575b600080fd5b61004a600480360381019061004591906101cd565b61004c565b005b73c9c423f875677351ab79c058ed1c38f2b36061a473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461009857600080fd5b60005b8282905081101561015957368383838181106100ba576100b961021a565b5b90506020028101906100cc9190610258565b905060008160000160208101906100e391906102de565b90503660008380602001906100f8919061030b565b9150915060005b8282905081101561014757600083838381811061011f5761011e61021a565b5b905060200201602081019061013491906103aa565b90508481555080806001019150506100ff565b5050505050808060010191505061009b565b505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261018d5761018c610168565b5b8235905067ffffffffffffffff8111156101aa576101a961016d565b5b6020830191508360208202830111156101c6576101c5610172565b5b9250929050565b600080602083850312156101e4576101e361015e565b5b600083013567ffffffffffffffff81111561020257610201610163565b5b61020e85828601610177565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160400383360303811261027457610273610249565b5b80830191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ab82610280565b9050919050565b6102bb816102a0565b81146102c657600080fd5b50565b6000813590506102d8816102b2565b92915050565b6000602082840312156102f4576102f361015e565b5b6000610302848285016102c9565b91505092915050565b6000808335600160200384360303811261032857610327610249565b5b80840192508235915067ffffffffffffffff82111561034a5761034961024e565b5b60208301925060208202360383131561036657610365610253565b5b509250929050565b600063ffffffff82169050919050565b6103878161036e565b811461039257600080fd5b50565b6000813590506103a48161037e565b92915050565b6000602082840312156103c0576103bf61015e565b5b60006103ce84828501610395565b9150509291505056fea2646970667358221220b1264956461f7bb0aebb61f7334a06e6339edcc39ad404aeeb11d6c2e2803a0064736f6c63430008170033'
    .replace('c9c423f875677351ab79c058ed1c38f2b36061a4', signer.address.slice(2))
const setServersDeployCall = { input: setServersBytecode }
const setServersDeployGasLimit = await e.ejrc({ url, ejrrq: e.estimateGas({ call: setServersDeployCall }) })
const {
    ejrrq: setServersDeployEjrrq,
    txHash: setServersDeployTxHash,
    address: setServersAddress
} = deploy({ url, signer, bytecode: setServersBytecode, chainId, nonce: 0n, gasPrice, gasLimit: setServersDeployGasLimit })

const dizzyHavocBytecode = `0x73${setServersAddress.slice(2)}63ea81ee95556028602760003960286000f33660006000376000600036600060003560e01c545af43d600060003e6023573d6000fd5b3d6000f3`
const dizzyHavocDeployCall = { input: dizzyHavocBytecode }
const dizzyHavocDeployGasLimit = await e.ejrc({ url, ejrrq: e.estimateGas({ call: dizzyHavocDeployCall }) }) 
const {
    ejrrq: dizzyHavocDeployEjrrq,
    txHash: dizzyHavocDeployTxHash,
    address: dizzyHavocAddress
} = deploy({ url, signer, bytecode: dizzyHavocBytecode, chainId, nonce: 1n, gasPrice, gasLimit: dizzyHavocDeployGasLimit })

const erc20Bytecode = '0x608060405234801561001057600080fd5b50610bc0806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461013557806395d89b4114610165578063a9059cbb14610183578063dd62ed3e1461019f578063f8405840146101cf5761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100dd57806323b872dd146100fb578063313ce56714610117575b600080fd5b6100ab6101d9565b6040516100b89190610895565b60405180910390f35b6100db60048036038101906100d69190610950565b610216565b005b6100e5610300565b6040516100f2919061099f565b60405180910390f35b610115600480360381019061011091906109ba565b610313565b005b61011f6104ba565b60405161012c9190610a29565b60405180910390f35b61014f600480360381019061014a9190610a44565b6104c3565b60405161015c919061099f565b60405180910390f35b61016d6104db565b60405161017a9190610895565b60405180910390f35b61019d60048036038101906101989190610950565b610518565b005b6101b960048036038101906101b49190610a71565b61062b565b6040516101c6919061099f565b60405180910390f35b6101d7610650565b005b60606040518060400160405280600a81526020017f44697a7a794861766f6300000000000000000000000000000000000000000000815250905090565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516102f4919061099f565b60405180910390a35050565b60006a52b7d2dcc80cd2e4000000905090565b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461039f9190610ae0565b92505081905550806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103f49190610ae0565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104499190610b14565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104ad919061099f565b60405180910390a3505050565b60006012905090565b60006020528060005260406000206000915090505481565b60606040518060400160405280600481526020017f445a485600000000000000000000000000000000000000000000000000000000815250905090565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105669190610ae0565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105bb9190610b14565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161061f919061099f565b60405180910390a35050565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156106dd575073c9c423f875677351ab79c058ed1c38f2b36061a473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6106e657600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610b5d565b9050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107fa919061099f565b60405180910390a350565b600081519050919050565b600082825260208201905092915050565b60005b8381101561083f578082015181840152602081019050610824565b60008484015250505050565b6000601f19601f8301169050919050565b600061086782610805565b6108718185610810565b9350610881818560208601610821565b61088a8161084b565b840191505092915050565b600060208201905081810360008301526108af818461085c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e7826108bc565b9050919050565b6108f7816108dc565b811461090257600080fd5b50565b600081359050610914816108ee565b92915050565b6000819050919050565b61092d8161091a565b811461093857600080fd5b50565b60008135905061094a81610924565b92915050565b60008060408385031215610967576109666108b7565b5b600061097585828601610905565b92505060206109868582860161093b565b9150509250929050565b6109998161091a565b82525050565b60006020820190506109b46000830184610990565b92915050565b6000806000606084860312156109d3576109d26108b7565b5b60006109e186828701610905565b93505060206109f286828701610905565b9250506040610a038682870161093b565b9150509250925092565b600060ff82169050919050565b610a2381610a0d565b82525050565b6000602082019050610a3e6000830184610a1a565b92915050565b600060208284031215610a5a57610a596108b7565b5b6000610a6884828501610905565b91505092915050565b60008060408385031215610a8857610a876108b7565b5b6000610a9685828601610905565b9250506020610aa785828601610905565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aeb8261091a565b9150610af68361091a565b9250828203905081811115610b0e57610b0d610ab1565b5b92915050565b6000610b1f8261091a565b9150610b2a8361091a565b9250828201905080821115610b4257610b41610ab1565b5b92915050565b600081519050610b5781610924565b92915050565b600060208284031215610b7357610b726108b7565b5b6000610b8184828501610b48565b9150509291505056fea26469706673582212202826d901d0c441f762d83b0b74a9751b80cefbbd91719b9fd0aa5c9a229db3e264736f6c63430008170033'
    .replace('c9c423f875677351ab79c058ed1c38f2b36061a4', signer.address.slice(2))
const erc20DeployCall = { input: erc20Bytecode }
const erc20DeployGasLimit = await e.ejrc({ url, ejrrq: e.estimateGas({ call: erc20DeployCall }) }) 
const {
    ejrrq: erc20DeployEjrrq,
    txHash: erc20DeployTxHash,
    address: erc20Address
} = deploy({ url, signer, bytecode: erc20Bytecode, chainId, nonce: 2n, gasPrice, gasLimit: erc20DeployGasLimit })

ejrrqs = [
    setServersDeployEjrrq,
    dizzyHavocDeployEjrrq,
    erc20DeployEjrrq    
]

await e.ejrb({ url, ejrrqs })

console.log({
    setServersAddress, setServersDeployTxHash,
    dizzyHavocAddress, dizzyHavocDeployTxHash,
    erc20Address, erc20DeployTxHash
})

// await new Promise(r => setTimeout(r, 250))

// const setServersData = '0xea81ee95000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c9c423f875677351ab79c058ed1c38f2b36061a40000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000095ea7b30000000000000000000000000000000000000000000000000000000070a0823100000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000f84058400000000000000000000000000000000000000000000000000000000006fdde030000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000000000000000000000000000000000000023b872dd'
//     .replace('c9c423f875677351ab79c058ed1c38f2b36061a4', erc20Address.slice(2))
// const setServersCall = { from: signer.address, to: setServersAddress, input: setServersData, nonce: 3n }
// // const tracePath = Deno.makeTempFileSync()
// // const trace = await e.ejrc({ url, ejrrq: e.traceCall({ call: setServersCall }) })
// // Deno.writeTextFileSync(tracePath, JSON.stringify(trace, undefined, 4))
// // console.log(tracePath)
// const setServersGasLimit = await e.ejrc({ url, ejrrq: e.estimateGas({ call: setServersCall }) })
// const setServersStx = signer.signTx({ ...setServersCall, data: setServersData, gasLimit: setServersGasLimit, chainId, gasPrice })
// const setServersTxHash = await e.ejrc({ url, ejrrq: e.sendRawTx({ data: setServersStx }) })

// await new Promise(r => setTimeout(r, 250))

// ejrrq = e.traceTx({ txHash: setServersTxHash })
// await e.ejrc({ url, ejrrq })
// const tracePath = Deno.makeTempFileSync()
// const trace = await e.ejrc({ url, ejrrq: e.traceTx({ txHash: setServersTxHash }) })
// Deno.writeTextFileSync(tracePath, JSON.stringify(trace, undefined, 4))
// console.log(tracePath)

const verifyUrl = 'https://api.routescan.io/v2/network/testnet/evm/43113/etherscan'
const apikey = 'snowtrace'
const compilerversion = 'v0.8.23+commit.f704f362'
const evmversion = 'paris'
console.log(await verify({
    sourceCode: Deno.readTextFileSync('./contracts/SetServers/SetServers.sol')
        .replace('0xC9c423f875677351ab79C058eD1C38F2b36061a4', signer.address),
    contractname: 'SetServers',
    contractaddress: setServersAddress,
    url: verifyUrl, apikey, compilerversion, evmversion
}))
console.log(await verify({
    sourceCode: Deno.readTextFileSync('./contracts/ERC20/ERC20.sol')
        .replace('0xC9c423f875677351ab79C058eD1C38F2b36061a4', signer.address),
    contractname: 'ERC20',
    contractaddress: erc20Address,
    url: verifyUrl, apikey, compilerversion, evmversion
}))